%% This function should return the energy for the 3D Cartesian Oseen Frank Rep 

function energy = lc_energy_spherical(matrix, K11, K22, K33, deltax, deltay, deltaz)

Nt = matrix(:,:,:,1);
Np = matrix(:,:,:,2);


[dNtdx, dNtdy, dNtdz] = gradient(Nt, deltax, deltay, deltaz);
[dNpdx, dNpdy, dNpdz] = gradient(Np, deltax, deltay, deltaz);



energy = (1/2).*K11.*((-1).*dNtdz.*sin(Nt)+cos(Np).*(dNtdx.*cos(Nt)+dNpdy.*sin(Nt) ...
  )+(dNtdy.*cos(Nt)+(-1).*dNpdx.*sin(Nt)).*sin(Np)).^2+(1/8).*K22.*((-2) ...
  .*dNpdz.*sin(Nt).^2+cos(Np).*((-2).*dNtdy+dNpdx.*sin(2.*Nt))+(2.*dNtdx+ ...
  dNpdy.*sin(2.*Nt)).*sin(Np)).^2+(1/32).*K33.*(16.*sin(Nt).^2.*(dNtdz.* ...
  cos(Nt)+sin(Nt).*(dNtdx.*cos(Np)+dNtdy.*sin(Np))).^2+(4.*dNpdx.*cos(Np) ...
  .^2.*sin(Nt).^2+2.*dNtdy.*sin(2.*Nt)+2.*dNpdz.*cos(Np).*sin(2.*Nt)+(-2) ...
  .*dNtdy.*cos(Np).^2.*sin(2.*Nt)+4.*dNtdz.*cos(Nt).^2.*sin(Np)+2.*dNpdy.* ...
  sin(Nt).^2.*sin(2.*Np)+dNtdx.*sin(2.*Nt).*sin(2.*Np)).^2+(4.*dNtdz.*cos( ...
  Nt).^2.*cos(Np)+2.*dNtdx.*sin(2.*Nt)+(-2).*dNpdz.*sin(2.*Nt).*sin(Np)+( ...
  -4).*dNpdy.*sin(Nt).^2.*sin(Np).^2+(-2).*dNtdx.*sin(2.*Nt).*sin(Np).^2+( ...
  -2).*dNpdx.*sin(Nt).^2.*sin(2.*Np)+dNtdy.*sin(2.*Nt).*sin(2.*Np)).^2);


end